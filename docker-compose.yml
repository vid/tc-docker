version: "3.3"
# This is Docker-compose for development and staging. Its goals are to permit simple setup for a developer, where the only local tool required is docker-compose,
# as well as supporting the same talentcloud application Dockerfile for development and production.

services:
    # talentcloud operations. Bootstraps the environment if required (no .setup file is present). Combines application logs into stderr and stout.
    talentcloud-op:
        build:
            context: .
            dockerfile: Dockerfile
        image: talentcloud-op
        container_name: talentcloud-op
        working_dir: /opt/TalentCloud/
        #        restart: always
        volumes:
#            - "./etc/ssl:/opt/TalentCloud/etc/ssl"
#            - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
#            - "./TalentCloud/:/opt/TalentCloud/var/www"
#            - "./op/Makefile:/opt/TalentCloud/var/www/Makefile:ro"
#            - "./op/test-fullstack.sh:/opt/TalentCloud/test-fullstack.sh:ro"
#            - "./op/op-assert.sh:/opt/TalentCloud/op-assert.sh:ro"
#            - "./op/up.sh:/opt/TalentCloud/up.sh:ro"
#            - "./op/env:/opt/TalentCloud/env:ro"
#            - "./op/.env.example:/opt/TalentCloud/.env.example:ro"
            - "ssl:/opt/TalentCloud/ssl"
            - "logs:/var/log"
            - "reports:/opt/TalentCloud/reports"
            - "TalentCloud:/opt/TalentCloud/var/www"
        environment:
            - "DB_PORT=5432"
            - "DB_HOST=postgres"
        depends_on:
            - talentcloud
            - postgres
    # The TalentCloud application (PHP-FPM)
    talentcloud:
        # DEBUGGING without wait-for-setup, this container can just use the image
        #        image: php:7.2-fpm-alpine3.7
        build:
            context: .
            dockerfile: Dockerfile-talentcloud
        working_dir: /var/www/
        #        restart: always
        volumes:
#            - "./wait-for-setup.sh:/opt/TalentCloud/wait-for-setup.sh"
#            - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini:rw"
#            - "./etc/php-fpm.d/zz-logs.conf:/usr/local/etc/php-fpm.d/zz-logs.conf:ro"
#            - "./TalentCloud/:/var/www"
            - "logs:/var/log"
            - "TalentCloud:/var/www/"
        environment:
            - "DB_PORT=5432"
            - "DB_HOST=postgres"
        ports:
            - "9000:9000"
    # The web server (nginx)
    nginx:
        build:
            context: .
            dockerfile: Dockerfile-nginx
        #        image: nginx:1.13.9-alpine
        container_name: nginx-setup
        working_dir: /var/www/
        restart: always
        volumes:
#            - "./etc/nginx/default.conf:/etc/nginx/conf.d/default.conf"
#            - "./etc/ssl:/etc/ssl"
#            - "./TalentCloud/:/var/www"
#            - "./wait-for-setup.sh:/opt/TalentCloud/wait-for-setup.sh"
            # needed for .setup signalling
            - "TalentCloud:/var/www"
            - "ssl:/opt/TalentCloud/ssl"
            - "logs:/var/log"
        ports:
            - "80:80"
            - "443:443"
    # The database (Postgres)
    postgres:
        build: 
            context: .
            dockerfile: Dockerfile-postgres
        container_name: postgres
#        image: postgres:9.6-alpine
        restart: always
        volumes:
#            - "./wait-for-setup.sh:/opt/TalentCloud/wait-for-setup.sh"
            - "pgdata:/var/lib/postgresql/data"
            - "logs:/var/log"
        environment:
            - "POSTGRES_DB=talentcloud"
            - "POSTGRES_USER=talentcloud"
            - "POSTGRES_PASSWORD=talentcloud"
        ports:
            - "5432-5434"
    # Adminer
    adminer:
        image: adminer
        container_name: adminer
        restart: always
        depends_on:
            - postgres
        ports:
            - "8060:8080"
volumes:
    pgdata:
    logs:
    reports:
    ssl:
    TalentCloud:
